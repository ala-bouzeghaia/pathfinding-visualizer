{"version":3,"sources":["components/navbar.js","actions/algorithms.js","actions/mazes.js","actions/visualize.js","actions/clearboard.js","actions/clearpath.js","components/node/node.js","components/algorithms/dijkstra.js","components/algorithms/astar.js","components/pathvisualizer.js","components/mazes/randomMaze.js","components/mazes/recursiveDivision.js","App.js","serviceWorker.js","reducers/algorithms.js","reducers/clearboard.js","reducers/clearpath.js","reducers/mazes.js","reducers/visualize.js","reducers/index.js","index.js"],"names":["Navbar","dispatch","useDispatch","algo","useSelector","state","visualizeAlgo","className","href","data-toggle","aria-haspopup","aria-expanded","onClick","type","Node","props","extraClassName","isFinish","isStart","isWall","ref","useRef","row","col","id","onMouseDown","onMouseEnter","onMouseUp","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","push","length","filter","isVisited","getAllNodes","nodes","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","sortNodesbyfscore","winner","i","heuristic","Math","abs","removeFromArray","arr","elt","splice","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","getInitialGrid","currentRow","createNode","Infinity","getNewGridWithWallToggled","newGrid","slice","newNode","PathfindingVisualizer","useState","setGrid","mouseIsPressed","setMouseIsPressed","useEffect","initialGrid","isClearBoardPressed","clearBoard","isClearPathPressed","clearPath","document","getElementById","ClearPressed","animateShortestPath","setTimeout","startVisualize","startNode","visitedNodesInOrder","animateDijkstra","closestNode","shift","dijkstra","visualizeDijkstra","animateAstar","openSet","closedSet","path","current","includes","tempG","temp","astar","visualizeAstar","resetGrid","maze","j","random","randomMaze","visualizeRandomMaze","console","log","addHWall","Grid","minX","maxX","y","hole","randomNumber","addVWall","minY","maxY","x","min","max","floor","ent","addInnerWalls","h","gate","recursiveDivision","visualizeRecursiveDivision","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","App","Boolean","window","location","hostname","match","VisualizeAlgoReducer","action","clearBoardReducer","clearPathReducer","MazeReducer","startVisualizeReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07857338.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { dijkstraAlgo, a_starAlgo } from \"../actions/algorithms\";\r\nimport { clearBoard } from \"../actions/clearboard\";\r\nimport { clearPath } from \"../actions/clearpath\";\r\nimport { RandomMaze, RecursiveDivision } from \"../actions/mazes\";\r\nimport { startVisualizeAlgo } from \"../actions/visualize\";\r\n\r\nconst Navbar = () => {\r\n  const dispatch = useDispatch();\r\n  const algo = useSelector((state) => state.visualizeAlgo);\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg bg-light\">\r\n      <div\r\n        className=\"navbar-brand link-button\" /* style={{ textDecoration: \"none\" }} */\r\n      >\r\n        <a href=\"/pathfinding-visualizer/\" className=\"link-button\">\r\n          Pathfinding Visualizer{\" \"}\r\n        </a>\r\n      </div>\r\n      {/* <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#NavbarMenu\"\r\n        aria-controls=\"NavbarMenu\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"toggle-button navbar-toggler-icon\"></span>\r\n      </button> */}\r\n\r\n      <div /* className=\"collapse navbar-collapse\" id=\"NavbarMenu\" */>\r\n        <ul className=\"nav nav-pills\">\r\n          <li className=\"nav-item dropdown\">\r\n            <button\r\n              className=\"link-button nav-link dropdown-toggle\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Algorithms\r\n            </button>\r\n\r\n            <div className=\"dropdown-menu\">\r\n              <button\r\n                className=\"link-button dropdown-item\"\r\n                onClick={() => dispatch(dijkstraAlgo())}\r\n              >\r\n                Dijkstra's Algorithm\r\n              </button>\r\n              <button\r\n                className=\"link-button dropdown-item\"\r\n                onClick={() => dispatch(a_starAlgo())}\r\n              >\r\n                A* Search\r\n              </button>\r\n            </div>\r\n          </li>\r\n\r\n          <li className=\"nav-item dropdown\">\r\n            <button\r\n              className=\"link-button nav-link dropdown-toggle\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Mazes\r\n            </button>\r\n            <div className=\"dropdown-menu\">\r\n              <button\r\n                className=\" link-button dropdown-item\"\r\n                onClick={() => dispatch(RandomMaze())}\r\n              >\r\n                Random Maze\r\n              </button>\r\n              <button\r\n                className=\"link-button dropdown-item\"\r\n                onClick={() => dispatch(RecursiveDivision())}\r\n              >\r\n                Recursive Division\r\n              </button>\r\n            </div>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"visualize-button nav-link active\"\r\n              onClick={() => dispatch(startVisualizeAlgo())}\r\n            >\r\n              Visualize{\" \"}\r\n              {algo === \"dijkstra\"\r\n                ? \"Dijkstra\"\r\n                : algo === \"a_star\"\r\n                ? \"A* Search\"\r\n                : \"\"}\r\n            </button>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={() => dispatch(clearBoard())}\r\n            >\r\n              Clear Board{\" \"}\r\n            </button>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"link-button\"\r\n              onClick={() => dispatch(clearPath())}\r\n            >\r\n              Clear Path{\" \"}\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","export const dijkstraAlgo = () => {\r\n  return {\r\n    type: \"DIJKSTRA\",\r\n  };\r\n};\r\n\r\nexport const a_starAlgo = () => {\r\n  return {\r\n    type: \"A_STAR\",\r\n  };\r\n};\r\n\r\nexport const noAlgo = () => {\r\n  return {\r\n    type: \"NO_ALGO\",\r\n  };\r\n};\r\n","export const RandomMaze = () => {\r\n  return {\r\n    type: \"RANDOM_MAZE\",\r\n  };\r\n};\r\n\r\nexport const RecursiveDivision = () => {\r\n  return {\r\n    type: \"RECURSIVE\",\r\n  };\r\n};\r\n\r\nexport const NoMaze = () => {\r\n  return {\r\n    type: \"NO_MAZE\",\r\n  };\r\n};\r\n","export const startVisualizeAlgo = () => {\r\n  return {\r\n    type: \"START_ALGO\",\r\n  };\r\n};\r\n","export const clearBoard = () => {\r\n  return {\r\n    type: \"CLEAR_BOARD\",\r\n  };\r\n};\r\n\r\nexport const clearedBoard = () => {\r\n  return {\r\n    type: \"BOARD_CLEARED\",\r\n  };\r\n};\r\n","export const clearPath = () => {\r\n  return {\r\n    type: \"CLEAR_PATH\",\r\n  };\r\n};\r\n\r\nexport const clearedPath = () => {\r\n  return {\r\n    type: \"PATH_CLEARED\",\r\n  };\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport \"./node.css\";\r\n\r\nconst Node = (props) => {\r\n  const extraClassName = props.isFinish\r\n    ? \"node-finish\"\r\n    : props.isStart\r\n    ? \"node-start\"\r\n    : props.isWall\r\n    ? \"node-wall\"\r\n    : \"\";\r\n\r\n  const ref = useRef(`node-${props.row}-${props.col}`);\r\n\r\n  return (\r\n    <div\r\n      id={`node-${props.row}-${props.col}`}\r\n      ref={ref}\r\n      className={`node ${extraClassName}`}\r\n      onMouseDown={() => props.onMouseDown(props.row, props.col)}\r\n      onMouseEnter={() => props.onMouseEnter(props.row, props.col)}\r\n      onMouseUp={() => props.onMouseUp()}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport const dijkstra = (grid, startNode, finishNode) => {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n};\r\n\r\nconst sortNodesByDistance = (unvisitedNodes) => {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n};\r\n\r\nconst updateUnvisitedNeighbors = (node, grid) => {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (node, grid) => {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited && !neighbor.isWall\r\n  );\r\n};\r\n\r\nconst getAllNodes = (grid) => {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport const getNodesInShortestPathOrder = (finishNode) => {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n};\r\n","export const astar = (grid, startNode, finishNode) => {\r\n  let openSet = [];\r\n  let closedSet = [];\r\n  let path = [];\r\n  startNode.distance = 0;\r\n\r\n  openSet.push(startNode);\r\n\r\n  while (openSet.length > 0) {\r\n    let winner = sortNodesbyfscore(openSet, finishNode);\r\n    let current = openSet[winner];\r\n\r\n    // did it find the end node?\r\n    if (current === finishNode) {\r\n      return path;\r\n    }\r\n\r\n    removeFromArray(openSet, current);\r\n    closedSet.push(current);\r\n\r\n    let neighbors = getUnvisitedNeighbors(current, grid);\r\n    for (let neighbor of neighbors) {\r\n      // Already seen?\r\n      if (!closedSet.includes(neighbor)) {\r\n        //tempG is the distance from start to neighbor through current\r\n        let tempG = current.distance + heuristic(neighbor, current);\r\n        //let newPath = false;\r\n        if (tempG < neighbor.distance) {\r\n          neighbor.previousNode = current;\r\n          neighbor.distance = tempG;\r\n          if (!openSet.includes(neighbor)) {\r\n            openSet.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let temp = current;\r\n    path.push(temp);\r\n    while (temp.previousNode) {\r\n      path.push(temp.previousNode);\r\n      temp = temp.previousNode;\r\n    }\r\n    /* for (let node of path) {\r\n            if (node.type !== \"start\") node.type =\"path\";\r\n        }*/\r\n  }\r\n\r\n  /* for (let i = path.length - 1; i >= 0; i--) {\r\n        if (path[i].type !== \"start\") path[i].type =\"found\";\r\n        this.setState({ grid });\r\n        await this.sleep(10); \r\n    }*/\r\n\r\n  return path;\r\n};\r\n\r\nconst sortNodesbyfscore = (nodes, finishNode) => {\r\n  let winner = 0;\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    if (\r\n      nodes[i].distance + heuristic(nodes[i], finishNode) <\r\n      nodes[winner].distance + heuristic(nodes[winner], finishNode)\r\n    ) {\r\n      winner = i;\r\n    }\r\n  }\r\n  return winner;\r\n};\r\n\r\nconst heuristic = (nodeA, nodeB) => {\r\n  return Math.abs(nodeB.col - nodeA.col) + Math.abs(nodeB.row - nodeA.row);\r\n};\r\n\r\nconst removeFromArray = (arr, elt) => {\r\n  for (let i = arr.length; i >= 0; i--) {\r\n    if (arr[i] === elt) {\r\n      arr.splice(i, 1);\r\n    }\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (node, grid) => {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited && !neighbor.isWall\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Node from \"./node/node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorithms/dijkstra\";\r\nimport { astar } from \"./algorithms/astar\";\r\nimport { randomMaze } from \"./mazes/randomMaze\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { clearedBoard } from \"../actions/clearboard\";\r\nimport { noAlgo } from \"../actions/algorithms\";\r\nimport { clearedPath } from \"../actions/clearpath\";\r\nimport { NoMaze } from \"../actions/mazes\";\r\nimport { recursiveDivision } from \"./mazes/recursiveDivision\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst PathfindingVisualizer = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n    setMouseIsPressed(true);\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsPressed(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initialGrid = getInitialGrid();\r\n    setGrid(initialGrid);\r\n  }, []);\r\n\r\n  //-----------Clear Board Or Path-------------------------------------//\r\n  const dispatch = useDispatch();\r\n  const isClearBoardPressed = useSelector((state) => state.clearBoard);\r\n  const isClearPathPressed = useSelector((state) => state.clearPath);\r\n\r\n  const ClearPressed = () => {\r\n    if (isClearBoardPressed) {\r\n      setGrid(getInitialGrid());\r\n      //console.log(\"grid\", grid);\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          //console.log(\"grid node\", grid[row][col]);\r\n          document.getElementById(\r\n            `node-${grid[row][col].row}-${grid[row][col].col}`\r\n          ).className = \"node \";\r\n        }\r\n      }\r\n      document.getElementById(\r\n        `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n      ).className = \"node node-start\";\r\n\r\n      document.getElementById(\r\n        `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n      ).className = \"node node-finish\";\r\n      dispatch(noAlgo());\r\n      dispatch(clearedBoard());\r\n    }\r\n    if (isClearPathPressed) {\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          if (!grid[row][col].isWall) {\r\n            grid[row][col] = createNode(col, row);\r\n            document.getElementById(\r\n              `node-${grid[row][col].row}-${grid[row][col].col}`\r\n            ).className = \"node \";\r\n          }\r\n        }\r\n      }\r\n      document.getElementById(\r\n        `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n      ).className = \"node node-start\";\r\n\r\n      document.getElementById(\r\n        `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n      ).className = \"node node-finish\";\r\n      dispatch(noAlgo());\r\n      dispatch(clearedPath());\r\n    }\r\n  };\r\n\r\n  ClearPressed();\r\n\r\n  //-----------Visualize Dijkstra's Algorithm----------------//\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = (nodesInShortestPathOrder) => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  const algo = useSelector((state) => state.visualizeAlgo);\r\n  const startVisualize = useSelector((state) => state.startVisualize);\r\n\r\n  const visualizeDijkstra = () => {\r\n    if (startVisualize && algo === \"dijkstra\") {\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          if (!grid[row][col].isWall) {\r\n            grid[row][col] = createNode(col, row);\r\n            document.getElementById(\r\n              `node-${grid[row][col].row}-${grid[row][col].col}`\r\n            ).className = \"node \";\r\n          }\r\n        }\r\n      }\r\n      document.getElementById(\r\n        `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n      ).className = \"node node-start\";\r\n\r\n      document.getElementById(\r\n        `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n      ).className = \"node node-finish\";\r\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    //dispatch(noAlgo());\r\n  };\r\n  visualizeDijkstra();\r\n\r\n  //--------------Visualize A* Search Algorithm----------------//\r\n\r\n  const animateAstar = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 2 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 2 * i);\r\n    }\r\n  };\r\n\r\n  const visualizeAstar = () => {\r\n    if (startVisualize && algo === \"a_star\") {\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          if (!grid[row][col].isWall) {\r\n            grid[row][col] = createNode(col, row);\r\n            document.getElementById(\r\n              `node-${grid[row][col].row}-${grid[row][col].col}`\r\n            ).className = \"node \";\r\n          }\r\n        }\r\n      }\r\n      document.getElementById(\r\n        `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n      ).className = \"node node-start\";\r\n\r\n      document.getElementById(\r\n        `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n      ).className = \"node node-finish\";\r\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      animateAstar(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    //dispatch(noAlgo());\r\n  };\r\n\r\n  visualizeAstar();\r\n\r\n  //------------------------Generate Maze----------------------//\r\n  const resetGrid = () => {\r\n    //const newGrid = grid.slice();\r\n    setGrid(getInitialGrid());\r\n    for (let row = 0; row < 20; row++) {\r\n      for (let col = 0; col < 50; col++) {\r\n        if (!grid[row][col].isStart && !grid[row][col].isFinish) {\r\n          grid[row][col] = createNode(col, row);\r\n          document.getElementById(\r\n            `node-${grid[row][col].row}-${grid[row][col].col}`\r\n          ).className = \"node \";\r\n        }\r\n      }\r\n    }\r\n    document.getElementById(\r\n      `node-${START_NODE_ROW}-${START_NODE_COL}`\r\n    ).className = \"node node-start\";\r\n    document.getElementById(\r\n      `node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`\r\n    ).className = \"node node-finish\";\r\n    //return newGrid;\r\n  };\r\n\r\n  const maze = useSelector((state) => state.maze);\r\n\r\n  const visualizeRandomMaze = () => {\r\n    if (maze === \"random\") {\r\n      //setGrid(resetGrid(grid));\r\n      resetGrid();\r\n      //const randomGrid = randomMaze(grid);\r\n      setGrid(randomMaze(grid));\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          if (grid[row][col].isWall) {\r\n            document.getElementById(\r\n              `node-${grid[row][col].row}-${grid[row][col].col}`\r\n            ).className = \"node node-wall\";\r\n          }\r\n        }\r\n      }\r\n      dispatch(NoMaze());\r\n    }\r\n  };\r\n  visualizeRandomMaze();\r\n\r\n  const visualizeRecursiveDivision = () => {\r\n    if (maze === \"recursive\") {\r\n      //setGrid(resetGrid(grid));\r\n      resetGrid();\r\n      //const recursiveMaze = recursiveDivision(grid);\r\n      console.log(\"grid\", grid[0]);\r\n      setGrid(recursiveDivision(grid));\r\n      console.log(\"new grid\", grid[0]);\r\n      for (let row = 0; row < 20; row++) {\r\n        for (let col = 0; col < 50; col++) {\r\n          if (grid[row][col].isWall) {\r\n            /* document.getElementById(\r\n              `node-${grid[row][col].row}-${grid[row][col].col}`\r\n            ).className = \"node node-wall\"; */\r\n            setTimeout(() => {\r\n              setTimeout(() => {\r\n                document.getElementById(\r\n                  `node-${grid[row][col].row}-${grid[row][col].col}`\r\n                ).className = \"node node-wall\";\r\n              }, 20 * col);\r\n            }, 20 * row);\r\n          }\r\n        }\r\n      }\r\n      dispatch(NoMaze());\r\n    }\r\n  };\r\n  visualizeRecursiveDivision();\r\n\r\n  //if (grid.length > 0) console.log(\"node distance\", grid[15][20]);\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx} className=\"row\" /* style={{ margin: -4 }} */>\r\n            {row.map((node, nodeIdx) => {\r\n              const { row, col, isFinish, isStart, isWall } = node;\r\n              return (\r\n                <Node\r\n                  key={nodeIdx}\r\n                  col={col}\r\n                  row={row}\r\n                  isFinish={isFinish}\r\n                  isStart={isStart}\r\n                  isWall={isWall}\r\n                  mouseIsPressed={mouseIsPressed}\r\n                  onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                  onMouseEnter={(row, col) => handleMouseEnter(row, col)}\r\n                  onMouseUp={() => handleMouseUp()}\r\n                ></Node>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathfindingVisualizer;\r\n","export const randomMaze = (grid) => {\r\n  const newGrid = grid.slice();\r\n  for (let i = 0; i < 20; i++) {\r\n    for (let j = 0; j < 50; j++) {\r\n      const node = newGrid[i][j];\r\n      if (Math.random() > 0.8 && !node.isStart && !node.isFinish) {\r\n        const newNode = { ...node, isWall: !node.isWall };\r\n        newGrid[i][j] = newNode;\r\n      }\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n","export const recursiveDivision = (grid) => {\r\n  const newGrid = grid.slice();\r\n  const addEntrance = () => {\r\n    let x = randomNumber(1, newGrid[0].length - 2);\r\n    return x;\r\n  };\r\n\r\n  const addInnerWalls = (h, minX, maxX, minY, maxY, gate) => {\r\n    if (h) {\r\n      if (maxX - minX < 2) {\r\n        return;\r\n      }\r\n\r\n      let y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\r\n      //console.log(\"y\", y);\r\n      addHWall(newGrid, minX, maxX, y);\r\n\r\n      addInnerWalls(!h, minX, maxX, minY, y - 1, gate);\r\n      addInnerWalls(!h, minX, maxX, y + 1, maxY, gate);\r\n    } else {\r\n      if (maxY - minY < 2) {\r\n        return;\r\n      }\r\n\r\n      let x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\r\n      //console.log(\"x\", x);\r\n      addVWall(newGrid, minY, maxY, x);\r\n\r\n      addInnerWalls(!h, minX, x - 1, minY, maxY, gate);\r\n      addInnerWalls(!h, x + 1, maxX, minY, maxY, gate);\r\n    }\r\n  };\r\n\r\n  const addHWall = (Grid, minX, maxX, y) => {\r\n    let hole = randomNumber(minX, maxX);\r\n    for (let i = minX; i < maxX; i++) {\r\n      const node = Grid[y][i];\r\n      if (!node.isStart && !node.isFinish && i !== hole) {\r\n        //Grid[y][i].isWall = true;\r\n        const newNode = { ...node, isWall: true };\r\n        Grid[y][i] = newNode;\r\n      }\r\n    }\r\n  };\r\n\r\n  const addVWall = (Grid, minY, maxY, x) => {\r\n    let hole = randomNumber(minY, maxY);\r\n    for (let i = minY; i <= maxY; i++) {\r\n      const node = Grid[i][x];\r\n      if (!node.isStart && !node.isFinish && i !== hole) {\r\n        //Grid[i][x].isWall = true;\r\n        const newNode = { ...node, isWall: true };\r\n        Grid[i][x] = newNode;\r\n      }\r\n    }\r\n  };\r\n\r\n  const randomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  let ent = addEntrance();\r\n  addInnerWalls(true, 0, newGrid[0].length - 1, 0, newGrid.length - 1, ent);\r\n  //console.log(\"newGrid\", newGrid);\r\n  return newGrid;\r\n};\r\n\r\n/* const addContours = (newGrid, row, col) => {\r\n  const node = newGrid[row][col];\r\n  if (row === 0 || row === 19) {\r\n    const newNode = { ...node, isWall: true };\r\n    newGrid[row][col] = newNode;\r\n  } else if (\r\n    (row > 0 && row < 19 && col === 0) ||\r\n    (row > 0 && row < 19 && col === 49)\r\n  ) {\r\n    const newNode = { ...node, isWall: true };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n}; */\r\n\r\nexport const recursiveDivision2 = (grid) => {\r\n  const newGrid = grid.slice();\r\n\r\n  const addEntrance = () => {\r\n    let x = randomNumber(1, newGrid[0].length - 1);\r\n    return x;\r\n  };\r\n\r\n  const addInnerWalls = (h, minX, maxX, minY, maxY, gate) => {\r\n    if (h) {\r\n      if (maxX - minX < 2) {\r\n        return;\r\n      }\r\n\r\n      let y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\r\n      //console.log(\"y\", y);\r\n      addHWall(newGrid, minX, maxX, y);\r\n\r\n      addInnerWalls(!h, minX, maxX, minY, y - 1, gate);\r\n      addInnerWalls(!h, minX, maxX, y + 1, maxY, gate);\r\n    } else {\r\n      if (maxY - minY < 2) {\r\n        return;\r\n      }\r\n\r\n      let x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\r\n      //console.log(\"x\", x);\r\n      addVWall(newGrid, minY, maxY, x);\r\n\r\n      addInnerWalls(!h, minX, x - 1, minY, maxY, gate);\r\n      addInnerWalls(!h, x + 1, maxX, minY, maxY, gate);\r\n    }\r\n  };\r\n\r\n  const addHWall = (Grid, minX, maxX, y) => {\r\n    let hole = randomNumber(minX, maxX);\r\n    for (let i = minX; i < maxX; i++) {\r\n      const node = Grid[y][i];\r\n      if (!node.isStart && !node.isFinish && i !== hole) {\r\n        //Grid[y][i].isWall = true;\r\n        const newNode = { ...node, isWall: true };\r\n        Grid[y][i] = newNode;\r\n      }\r\n    }\r\n  };\r\n\r\n  const addVWall = (Grid, minY, maxY, x) => {\r\n    let hole = randomNumber(minY, maxY);\r\n    for (let i = minY; i <= maxY; i++) {\r\n      const node = Grid[i][x];\r\n      if (!node.isStart && !node.isFinish && i !== hole) {\r\n        //Grid[i][x].isWall = true;\r\n        const newNode = { ...node, isWall: true };\r\n        Grid[i][x] = newNode;\r\n      }\r\n    }\r\n  };\r\n\r\n  const randomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  let ent = addEntrance();\r\n  addInnerWalls(false, 0, newGrid[0].length - 1, 0, newGrid.length - 1, ent);\r\n  //console.log(\"newGrid\", newGrid);\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport PathfindingVisualizer from \"./components/pathvisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const VisualizeAlgoReducer = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case \"DIJKSTRA\":\r\n      return \"dijkstra\";\r\n    case \"A_STAR\":\r\n      return \"a_star\";\r\n    case \"NO_ALGO\":\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default VisualizeAlgoReducer;\r\n","const clearBoardReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"CLEAR_BOARD\":\r\n      return true;\r\n    case \"BOARD_CLEARED\":\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default clearBoardReducer;\r\n","const clearPathReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"CLEAR_PATH\":\r\n      return true;\r\n    case \"PATH_CLEARED\":\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default clearPathReducer;\r\n","const MazeReducer = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case \"RANDOM_MAZE\":\r\n      return \"random\";\r\n    case \"RECURSIVE\":\r\n      return \"recursive\";\r\n    case \"NO_MAZE\":\r\n      return \"\";\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default MazeReducer;\r\n","const startVisualizeReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"START_ALGO\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nexport default startVisualizeReducer;\r\n","import VisualizeAlgoReducer from \"./algorithms\";\r\nimport clearBoardReducer from \"./clearboard\";\r\nimport clearPathReducer from \"./clearpath\";\r\nimport MazeReducer from \"./mazes\";\r\nimport startVisualizeReducer from \"./visualize\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n  visualizeAlgo: VisualizeAlgoReducer,\r\n  clearBoard: clearBoardReducer,\r\n  clearPath: clearPathReducer,\r\n  maze: MazeReducer,\r\n  startVisualize: startVisualizeReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}